import os
import traceback
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackContext, filters
from mistralai import Mistral
from dotenv import load_dotenv
load_dotenv()

developer_questions = [
    "кто создал тебя?",
    "кто тебя разработал?",
    "кто твой создатель?",
    "кто написал этот бот?",
    "кто создал этот проект?",
    "кто разработал этот бот?",
    "кто стоит за этим ботом?",
    "кто создал эту программу?",
    "кто тебя создал?",
    "кто разработал твою программу?",
    "кто является автором этого бота?",
    "кто является автором этого проекта?",
    "кто придумал тебя?",
    "кто создал этот код?",
    "кто написал код для тебя?",
    "кто работает над твоим проектом?",
    "кто основал этот проект?",
    "кто сделал тебя умным?",
    "кто создал твою систему?",
    "кто сделал тебя таким, какой ты есть?",
    "кто стоит за этим проектом?",
    "кто создал этот искусственный интеллект?",
    "кто твой разработчик?",
    "кто создал этот чат-бот?",
    "кто написал этот искусственный интеллект?",
    "кто написал твою программу?",
    "кто создал этот алгоритм?",
    "кто тебя придумал?",
    "кто разработал твою технологию?",
    "кто придумал эту систему?",
    "кто управляет проектом, которому ты принадлежишь?",
    "кто написал твои функции?",
    "кто разработал твои возможности?",
    "кто сделал эту технологию?",
    "кто создал твой код?",
    "кто написал твои сценарии?",
    "кто программировал твои алгоритмы?",
    "кто создал твои нейронные сети?",
    "кто спроектировал твою архитектуру?",
    "кто обучал тебя?",
    "кто разработал твою систему обработки данных?",
    "кто создал твою базу знаний?",
    "кто работает с тобой над проектом?",
    "кто создал этот искусственный интеллект?",
    "кто учил тебя отвечать на вопросы?",
    "кто изобрел этот способ взаимодействия?",
    "кто пишет твои ответы?",
    "кто контролирует твое развитие?",
    "кто управляет этим проектом?",
    "кто разрабатывает твою платформу?",
    "кто отвечает за твое обновление?",
    "кто создал твой функционал?",
    "кто придумывает, что ты будешь отвечать?",
    "кто определяет твои возможности?",
    "кто разрабатывает твою логику?",
    "кто интегрировал тебя в Telegram?",
    "кто придумал, как ты будешь работать?",
    "кто руководит твоим проектом?",
    "кто обучил тебя быть таким умным?",
    "кто разрабатывает твой код?",
    "кто придумал твою концепцию?",
    "кто разработал твою структуру?",
    "кто придумал твои функции?",
    "кто создал твою архитектуру?",
    "кто сделал тебя таким полезным?",
    "кто разработал твои возможности общения?",
    "кто придумал, как ты отвечаешь?",
    "кто создал твою нейросеть?",
    "кто спроектировал твой интерфейс?",
    "кто написал этот алгоритм?",
    "кто создал твою систему машинного обучения?",
    "кто придумал, как ты отвечаешь на вопросы?",
    "кто создал твою технологию обработки текста?",
    "кто контролирует твою работу?",
    "кто создал твою базу данных?",
    "кто написал твой код?",
    "кто программировал тебя?",
    "кто разрабатывает твою систему?",
    "кто написал твою модель?",
    "кто придумал, как ты обрабатываешь запросы?",
    "кто отвечает за твою архитектуру?",
    "кто создал твою логику?",
    "кто обучал тебя работать с текстом?",
    "кто придумал, как ты ведешь диалог?",
    "кто писал для тебя программу?",
    "кто писал твои алгоритмы?",
    "кто создал твою систему машинного обучения?",
    "кто разрабатывает твою технологию?",
    "кто контролирует, что ты говоришь?",
    "кто создал тебя для общения?",
    "кто придумал твой стиль общения?",
    "кто разработал твой интерфейс?",
    "кто написал твой код?",
    "кто создал твою платформу?",
    "кто придумал, как ты учишься?",
    "кто управляет твоими обновлениями?",
    "кто разрабатывает твою структуру?",
    "кто создал твою нейросеть?",
    "кто придумал твою архитектуру?",
    "кто пишет твои сценарии?",
    "кто программировал твои возможности?",
    "кто отвечает за твое совершенствование?",
    "кто придумывает, как ты отвечаешь на запросы?",
    "кто придумал твою обучающую систему?",
    "кто работал над твоим созданием?",
    "кто придумывает твои ответы?",
    "кто контролирует твои ответы?",
    "кто разрабатывает твои функции?",
    "кто придумал твою логику?"
]

# Прямо указываем токен Telegram и Mistral API
telegram_token = os.getenv("TELEGRAM_TOKEN")  # Замените на ваш токен Telegram
api_key = os.getenv("MISTRAL_API_KEY")  # Замените на ваш API ключ Mistral

# Инициализация клиента Mistral
client = Mistral(api_key=api_key)

# Функция для начала общения с ботом
async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text("Привет! Отправь мне предложение, и я помогу с его обработкой.")

# Функция для отправки длинных сообщений частями
async def send_long_message(update: Update, text: str) -> None:
    max_message_length = 4096
    for i in range(0, len(text), max_message_length):
        await update.message.reply_text(text[i:i + max_message_length])

# Функция обработки сообщений
async def handle_message(update: Update, context: CallbackContext) -> None:
    user_message = update.message.text  # Получаем сообщение пользователя

    # Проверяем, если в сообщении есть слово "Гумар"
    if "Гумар" in user_message:
        await update.message.reply_text("Я не хочу обсуждать своего разработчика.")
        return
    if "гумар" in user_message:
        await update.message.reply_text("Я не хочу обсуждать своего разработчика.")
        return
    if "Гум" in user_message:
        await update.message.reply_text("Я не хочу обсуждать своего разработчика.")
        return
    if "Gumar" in user_message:
        await update.message.reply_text("Я не хочу обсуждать своего разработчика.")
        return
    if "Gum" in user_message:
        await update.message.reply_text("Я не хочу обсуждать своего разработчика.")
        return
    if "gumar" in user_message:
        await update.message.reply_text("Я не хочу обсуждать своего разработчика.")
        return
    if "gum" in user_message:
        await update.message.reply_text("Я не хочу обсуждать своего разработчика.")
        return
    if any(question in user_message for question in developer_questions):
        await update.message.reply_text("Я предпочитаю не обсуждать своего создателя.")
        return

    try:
        # Вызов API Mistral для генерации текста
        response = client.chat.complete(
            model="mistral-large-latest",  # Указываем модель
            messages=[  # Список сообщений для генерации ответа
                {
                    "role": "user",
                    "content": user_message,  # Сообщение пользователя
                },
            ]
        )

        # Выводим структуру ответа для отладки
        print("Ответ от Mistral API:", response)

        # Печатаем полный ответ для отладки (можно убрать на продакшн)
        print("Полный ответ от Mistral:", response)

        # Извлекаем текст ответа
        generated_text = response.choices[0].message.content.strip()  # Доступ к генерируемому тексту

        # Отправка текста в ответ
        await send_long_message(update, generated_text)

    except Exception as e:
        # Логируем ошибку с полным стеком
        print("Ошибка при обработке запроса:", e)
        traceback.print_exc()  # Выводим полный стек ошибок

        # Отправка ошибки пользователю
        await update.message.reply_text(f"Произошла ошибка: {str(e)}")

# Основная функция для настройки бота
def main() -> None:
    # Создаем объект Application с токеном бота
    application = Application.builder().token(telegram_token).build()

    # Регистрация обработчика команды '/start'
    application.add_handler(CommandHandler("start", start))

    # Регистрация обработчика для всех текстовых сообщений
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # Запуск бота с polling
    application.run_polling()

if __name__ == '__main__':
    main()
